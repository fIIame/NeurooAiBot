from aiogram import Router, Bot
from aiogram.types import Message
from aiogram.enums import ChatAction
from openai import AsyncOpenAI

from database.repositories import UsersRepository, UsersMemoriesRepository
from bot.services.ai_services import AIService
from bot.services.memory_services import MemoryService

router = Router()


@router.message()
async def handle_other_messages(
    message: Message,
    bot: Bot,
    openai_client: AsyncOpenAI
):
    user_id = message.from_user.id
    user_text = message.text

    # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if not await UsersRepository.is_user_activated(user_id):
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start")
        return

    # --- –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç" ---
    processing_msg = await message.answer("üí° –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 10‚Äì15 —Å–µ–∫—É–Ω–¥.")
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)

    # --- –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é ---
    await MemoryService.save(user_id, user_text, openai_client)
    memories = await MemoryService.get(user_id, user_text, openai_client)
    memories_context = "\n".join(memories) if memories else ""

    # --- –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ---
    ai_reply = await AIService.get_reply(user_text, memories_context, openai_client)

    # --- –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç ---
    await processing_msg.delete()
    await message.reply(ai_reply)