from typing import List, Optional
from openai import AsyncOpenAI
from core.lexicon import SYSTEM_PROMPTS_LEXICON


class AIService:
    """
    –°–µ—Ä–≤–∏—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI (OpenAI).

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ChatCompletion API, –≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –û—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–æ–¥–µ–ª—å OpenAI –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞.
    """

    @staticmethod
    async def get_reply(
        user_text: str,
        memories_context: Optional[str],
        openai_client: AsyncOpenAI,
        model: str
    ) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ AI –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
        1. –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        2. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å.
        3. –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ OpenAI ChatCompletion API.
        5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç.

        Args:
            user_text (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            memories_context (Optional[str]): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                              (–æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).
            openai_client (AsyncOpenAI): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI.
            model (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "gpt-5-mini").

        Returns:
            str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏. –ï—Å–ª–∏ AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        # --- –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Chat API ---
        messages: List = [
            # –ë–∞–∑–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            {"role": "system", "content": SYSTEM_PROMPTS_LEXICON["system_prompts"]["base_assistant"]}
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if memories_context:
            messages.append({
                "role": "system",
                "content": SYSTEM_PROMPTS_LEXICON["system_prompts"]["rule_memory"].format(memories_context)
            })

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_text})

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI ---
        response = await openai_client.chat.completions.create(
            model=model,
            messages=messages
        )

        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ ---
        ai_message = response.choices[0].message.content

        # --- Fallback, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç ---
        return ai_message.strip() if ai_message else "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç üòî"
