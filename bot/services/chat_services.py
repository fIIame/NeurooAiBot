from typing import List, Optional

from openai import AsyncOpenAI

from core.lexicon import SYSTEM_PROMPTS_LEXICON


class AIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI (OpenAI).

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ChatCompletion API (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –ø–∞–º—è—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    - –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ OpenAI –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞.
    """

    @staticmethod
    async def get_reply(
        user_text: str,
        memories_context: Optional[str],
        openai_client: AsyncOpenAI,
        model: str
    ) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ AI –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –õ–æ–≥–∏–∫–∞:
        1. –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–∞–∑–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
        3. –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI ChatCompletion API.
        5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏.

        Args:
            user_text (str): –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            memories_context (Optional[str]): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                                (—Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫—É).
            openai_client (AsyncOpenAI): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI.
            model (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "gpt-5-mini").

        Returns:
            str: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ AI. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Chat API ---
        messages: List = [
            # –ë–∞–∑–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            {"role": "system", "content": SYSTEM_PROMPTS_LEXICON["system_prompts"]["base_assistant"]},
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if memories_context:
            messages.append({
                "role": "system",
                "content": SYSTEM_PROMPTS_LEXICON["system_prompts"]["rule_memory"].format(memories_context)
            })

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_text})

        # --- –ó–∞–ø—Ä–æ—Å –≤ OpenAI ---
        response = await openai_client.chat.completions.create(
            model=model,
            messages=messages
        )

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ ---
        ai_message = response.choices[0].message.content

        # --- Fallback (–µ—Å–ª–∏ AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç) ---
        return ai_message.strip() if ai_message else "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç üòî"